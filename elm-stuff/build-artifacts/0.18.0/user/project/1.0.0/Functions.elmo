var _user$project$Functions$tpc2note = function (k) {
	return _elm_lang$core$Native_Utils.eq(k, 2) ? 0 : (_elm_lang$core$Native_Utils.eq(k, 9) ? 1 : (_elm_lang$core$Native_Utils.eq(k, 4) ? 2 : (_elm_lang$core$Native_Utils.eq(k, 11) ? 3 : (_elm_lang$core$Native_Utils.eq(k, 6) ? 4 : (_elm_lang$core$Native_Utils.eq(k, 1) ? 5 : (_elm_lang$core$Native_Utils.eq(k, 8) ? 6 : (_elm_lang$core$Native_Utils.eq(k, 3) ? 7 : (_elm_lang$core$Native_Utils.eq(k, 10) ? 8 : (_elm_lang$core$Native_Utils.eq(k, 5) ? 9 : (_elm_lang$core$Native_Utils.eq(k, 0) ? 10 : 11))))))))));
};
var _user$project$Functions$tpcDecreciente = function (a) {
	return A2(_elm_lang$core$Basics_ops['%'], a - 7, 12) + 12;
};
var _user$project$Functions$tpcCreciente = function (a) {
	return A2(_elm_lang$core$Basics_ops['%'], a + 7, 12) + 12;
};
var _user$project$Functions$tpcChange = F2(
	function (a, b) {
		tpcChange:
		while (true) {
			var _p0 = A2(_elm_lang$core$Basics$compare, b, 0);
			switch (_p0.ctor) {
				case 'EQ':
					return a;
				case 'GT':
					var _v1 = _user$project$Functions$tpcCreciente(a),
						_v2 = b - 1;
					a = _v1;
					b = _v2;
					continue tpcChange;
				default:
					var _v3 = _user$project$Functions$tpcDecreciente(a),
						_v4 = b + 1;
					a = _v3;
					b = _v4;
					continue tpcChange;
			}
		}
	});
var _user$project$Functions$getDifference = F2(
	function (model, k) {
		var arr = _elm_lang$core$Native_Utils.eq(k, 0) ? model.escala.$do : (_elm_lang$core$Native_Utils.eq(k, 1) ? model.escala.dos : (_elm_lang$core$Native_Utils.eq(k, 2) ? model.escala.re : (_elm_lang$core$Native_Utils.eq(k, 3) ? model.escala.res : (_elm_lang$core$Native_Utils.eq(k, 4) ? model.escala.mi : (_elm_lang$core$Native_Utils.eq(k, 5) ? model.escala.fa : (_elm_lang$core$Native_Utils.eq(k, 6) ? model.escala.fas : (_elm_lang$core$Native_Utils.eq(k, 7) ? model.escala.sol : (_elm_lang$core$Native_Utils.eq(k, 8) ? model.escala.sols : (_elm_lang$core$Native_Utils.eq(k, 9) ? model.escala.la : (_elm_lang$core$Native_Utils.eq(k, 10) ? model.escala.las : model.escala.si))))))))));
		return arr - k;
	});
var _user$project$Functions$detpc = function (model) {
	return A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('<tpc>[0-9]+</tpc>'),
		function (_p1) {
			var _p2 = _p1;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'<tpc>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						function (n) {
							return A2(
								_user$project$Functions$tpcChange,
								n,
								A2(
									_user$project$Functions$getDifference,
									model,
									_user$project$Functions$tpc2note(
										A3(
											_elm_lang$core$Basics$flip,
											F2(
												function (x, y) {
													return A2(_elm_lang$core$Basics_ops['%'], x, y);
												}),
											12,
											n))));
						}(
							A2(
								_elm_lang$core$Result$withDefault,
								21,
								_elm_lang$core$String$toInt(
									A3(_elm_lang$core$String$slice, 5, -6, _p2.match))))),
					'</tpc>'));
		});
};
var _user$project$Functions$depitch = function (model) {
	return A3(
		_elm_lang$core$Regex$replace,
		_elm_lang$core$Regex$All,
		_elm_lang$core$Regex$regex('<pitch>[0-9]+</pitch>'),
		function (_p3) {
			var _p4 = _p3;
			return A2(
				_elm_lang$core$Basics_ops['++'],
				'<pitch>',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(
						function (n) {
							return A2(
								F2(
									function (x, y) {
										return x + y;
									}),
								n,
								A2(
									_user$project$Functions$getDifference,
									model,
									A3(
										_elm_lang$core$Basics$flip,
										F2(
											function (x, y) {
												return A2(_elm_lang$core$Basics_ops['%'], x, y);
											}),
										12,
										n)));
						}(
							A2(
								_elm_lang$core$Result$withDefault,
								21,
								_elm_lang$core$String$toInt(
									A3(_elm_lang$core$String$slice, 7, -8, _p4.match))))),
					'</pitch>'));
		});
};
var _user$project$Functions$modify = function (model) {
	var scoreModify = function () {
		var _p5 = model.mScore;
		if (_p5.ctor === 'Just') {
			return _p5._0;
		} else {
			return _user$project$Types$example;
		}
	}();
	return _elm_lang$core$Native_Utils.update(
		model,
		{
			mScore: _elm_lang$core$Maybe$Just(
				{
					contents: A2(
						_user$project$Functions$detpc,
						model,
						A2(_user$project$Functions$depitch, model, scoreModify.contents)),
					filename: A2(
						_elm_lang$core$Basics_ops['++'],
						A2(_elm_lang$core$String$dropRight, 5, scoreModify.filename),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' - ',
							A2(_elm_lang$core$Basics_ops['++'], model.escala.nombre, '.mscx')))
				})
		});
};
